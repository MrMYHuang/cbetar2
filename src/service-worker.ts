/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import Constants from './Constants';
import IndexedDbFuncs from './IndexedDbFuncs';
import VirtualHtml from './models/VirtualHtml';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

const virtualHtmls: VirtualHtml[] = [];
// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data) {
    switch (event.data.type) {
      case 'SKIP_WAITING':
        self.skipWaiting();
        break;
      case 'VIRTUAL_HTML':
        // Transfer HTML contents for iframe from window.
        virtualHtmls.push({
          pathname: event.data.pathname,
          html: event.data.html,
        });
        event.ports[0].postMessage({ type: 'VIRTUAL_HTML', pathname: event.data.pathname })
        break;
    }
  }
});

// Any other custom service worker logic can go here.

// Response a virtual HTML file to iframes with the same origin as window, so that iframes can inherit service worker from window.
registerRoute(({ url }) => {
  if (url.origin === self.location.origin && virtualHtmls.some((v) => v.pathname === url.pathname)) {
    return true;
  }
  return false;
}, async ({ url }) => {
  const dataIndex = virtualHtmls.findIndex(v => v.pathname === url?.pathname);
  const data = virtualHtmls.splice(dataIndex, 1)[0];
  const headers = new Headers({
    'Content-Type': 'text/html'
  });
  return new Response(data.html, {
    headers
  });
});

registerRoute((opts) => {
  if (opts.url.host === Constants.indexedDBHost) {
    return true;
  }
  return false;
}, async ({ url }) => {
  // Image is uncompressed.
  const imgData = await IndexedDbFuncs.getFile(url?.pathname.substring(1) ?? '') as Uint8Array;
  return new Response(imgData);
});